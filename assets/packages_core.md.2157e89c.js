import{_ as e,c as s,o as t,a}from"./app.e2a9d70a.js";const g=JSON.parse('{"title":"\u{1F331} @exposition/core","description":"","frontmatter":{},"headers":[{"level":2,"title":"Install dependencies","slug":"install-dependencies"},{"level":2,"title":"Motivation","slug":"motivation"},{"level":2,"title":"Create an exposition \u{1F4D9}","slug":"create-an-exposition-\u{1F4D9}"},{"level":3,"title":"Config","slug":"config"},{"level":3,"title":"Options","slug":"options"},{"level":2,"title":"Interact with the state","slug":"interact-with-the-state"},{"level":2,"title":"Listen on events","slug":"listen-on-events"},{"level":2,"title":"Add an integration","slug":"add-an-integration"}],"relativePath":"packages/core.md","lastUpdated":1668003503000}'),n={name:"packages/core.md"},o=a(`<h1 id="\u{1F331}-exposition-core" tabindex="-1">\u{1F331} @exposition/core <a class="header-anchor" href="#\u{1F331}-exposition-core" aria-hidden="true">#</a></h1><p>Create an <a href="https://h2xd.github.io/exposition/" target="_blank" rel="noopener noreferrer"><code>@exposition</code></a> and use <a href="https://h2xd.github.io/exposition/packages/integrations.html" target="_blank" rel="noopener noreferrer">integrations</a> or build custom ones by listening to various events.</p><h2 id="install-dependencies" tabindex="-1">Install dependencies <a class="header-anchor" href="#install-dependencies" aria-hidden="true">#</a></h2><p>Here are three commands for the most used package managers.<br><em>I&#39;ll be biased and promote my favorite one first.</em></p><div class="language-sh"><span class="copy"></span><pre><code><span class="line"><span style="color:#ABB2BF;">pnpm add -D @exposition/core</span></span>
<span class="line"></span></code></pre></div><div class="language-sh"><span class="copy"></span><pre><code><span class="line"><span style="color:#ABB2BF;">yarn add -D @exposition/core</span></span>
<span class="line"></span></code></pre></div><div class="language-sh"><span class="copy"></span><pre><code><span class="line"><span style="color:#ABB2BF;">npm install -D @exposition/core</span></span>
<span class="line"></span></code></pre></div><h2 id="motivation" tabindex="-1">Motivation <a class="header-anchor" href="#motivation" aria-hidden="true">#</a></h2><p>The goal of this project is to provide really good developer experience, when it comes to API mocking. The reason is that API mocking with a large subset of different variations / results is really hard and I saw a lot of project skipping tests because even thinking about the amount of work and the debugging later on is insane. <em>Okay! Okay! I will stop. Here is a candy to calm down.</em> \u{1F36C}</p><p><strong>This library is written with the thought that devs never want to leave their IDE and love to fiddle around with code first. Therefore you can find a lot of examples and descriptions in TSDoc.</strong></p><h2 id="create-an-exposition-\u{1F4D9}" tabindex="-1">Create an exposition \u{1F4D9} <a class="header-anchor" href="#create-an-exposition-\u{1F4D9}" aria-hidden="true">#</a></h2><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">exposition</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Exposition</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">stage</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;\u{1F41B} Small&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;\u{1F98B} Big&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="config" tabindex="-1">Config <a class="header-anchor" href="#config" aria-hidden="true">#</a></h3><p>The first parameter is a simple record that will define the Schema of your <code>Exposition</code> instance. Feel free to name your keys that describes your <code>Scenario</code> in the best possible way. Also the first index of the <code>options</code> array will be set as the <code>initialValue</code> of the <code>Scenario</code>.</p><h3 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-hidden="true">#</a></h3><p>You can overwrite the default settings of <code>Exposition</code> with the second parameter.</p><table><thead><tr><th>setting</th><th>description</th><th>example</th></tr></thead><tbody><tr><td><code>active</code></td><td>Signal all integrations that they should stop their actions</td><td><a href="https://h2xd.github.io/exposition/integrations/msw.html" target="_blank" rel="noopener noreferrer"><code>@exposition/integrations/msw</code></a> will reset all handler if this option is set to <code>false</code></td></tr><tr><td><code>restoreState</code></td><td>Signal all integrations that they should prevent all state restoration handler</td><td><a href="https://h2xd.github.io/exposition/integrations/vue-devtools.html" target="_blank" rel="noopener noreferrer"><code>@exposition/integrations/vue-devtools</code></a> will not interact with the <code>localStorage</code> if this option is set to <code>false</code></td></tr></tbody></table><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">exposition</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Exposition</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// ... your config</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">settings</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">active</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">restoreState</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="interact-with-the-state" tabindex="-1">Interact with the state <a class="header-anchor" href="#interact-with-the-state" aria-hidden="true">#</a></h2><p>You can use the following commands to interact with your defined <code>Scenario</code> elements:</p><table><thead><tr><th>command</th><th>type</th><th>action</th></tr></thead><tbody><tr><td><code>values</code></td><td><code>getter</code></td><td>return the current <code>Scenario</code> values</td></tr><tr><td><code>initialValues</code></td><td><code>getter</code></td><td>similar to <code>values</code> but will return the initialValue of the <code>Scenario</code></td></tr><tr><td><code>update</code></td><td><code>method</code></td><td>update one or multiple of your <code>Scenario</code> values</td></tr><tr><td><code>reset</code></td><td><code>method</code></td><td>reset one or multiple <code>Scenario</code> elements to their <code>initialValue</code></td></tr><tr><td><code>init</code></td><td><code>method</code></td><td>signal all integrations that you are finished with your setup</td></tr></tbody></table><p>There are also commands to read and change the state of the overall <code>Exposition</code> settings:</p><table><thead><tr><th>command</th><th>type</th><th>action</th></tr></thead><tbody><tr><td><code>settings</code></td><td><code>getter</code></td><td>get the currently set settings</td></tr><tr><td><code>updateSettings</code></td><td><code>method</code></td><td>update one or multiple <code>Exposition</code> settings</td></tr></tbody></table><h2 id="listen-on-events" tabindex="-1">Listen on events <a class="header-anchor" href="#listen-on-events" aria-hidden="true">#</a></h2><p>You can write handler to react to the following events:</p><table><thead><tr><th>event</th><th>timing</th><th>extras</th></tr></thead><tbody><tr><td><code>reset</code></td><td>when the <code>reset</code> method is called</td><td></td></tr><tr><td><code>update</code></td><td>when the <code>update</code> method is called</td><td></td></tr><tr><td><code>initialized</code></td><td>when the <code>init</code> method is called</td><td>will only be called once</td></tr><tr><td><code>updateSettings</code></td><td>when the <code>updateSettings</code> method is called</td><td></td></tr></tbody></table><p>The event handler will also contain the current <code>Exposition.values</code> and <code>Exposition.settings</code>.</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">exposition</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Exposition</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">stage</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;\u{1F41B} Small&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;\u{1F98B} Big&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">exposition</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;update&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">values</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">settings</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">values</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">exposition</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">stage</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;\u{1F98B} Big&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// will trigger the console.log</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(values) -&gt; { &quot;stage&quot;: &quot;\u{1F98B} Big&quot; }</span></span>
<span class="line"></span></code></pre></div><h2 id="add-an-integration" tabindex="-1">Add an integration <a class="header-anchor" href="#add-an-integration" aria-hidden="true">#</a></h2><p>Mock Service Worker is the primary integration and even the reason for this library. Therefore I highly recommend to start with the <a href="https://h2xd.github.io/exposition/cookbook/setup-msw.html" target="_blank" rel="noopener noreferrer">msw setup guide</a> first.</p><p>You can also create your own integration that levels on the above <code>on</code> events.</p><p>A guide how to write a custom integration will follow.</p><p>For now you can check out the implementation of <a href="https://github.com/h2xd/exposition/blob/main/packages/integrations/msw/functions/createMswIntegration.ts" target="_blank" rel="noopener noreferrer"><code>msw</code></a></p>`,33),l=[o];function p(r,i,c,d,h,B){return t(),s("div",null,l)}var u=e(n,[["render",p]]);export{g as __pageData,u as default};
