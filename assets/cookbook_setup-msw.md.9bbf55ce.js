import{_ as s,c as e,o as n,a}from"./app.7ff2b3e1.js";const u=JSON.parse('{"title":"Setup Mock Service Worker Integration","description":"","frontmatter":{},"headers":[{"level":2,"title":"Install dependencies","slug":"install-dependencies"},{"level":2,"title":"Setup","slug":"setup"},{"level":2,"title":"Define handler","slug":"define-handler"},{"level":2,"title":"Include into your app","slug":"include-into-your-app"},{"level":2,"title":"Next steps","slug":"next-steps"},{"level":2,"title":"In the meantime","slug":"in-the-meantime"}],"relativePath":"cookbook/setup-msw.md","lastUpdated":1658066848000}'),o={name:"cookbook/setup-msw.md"},l=a(`<h1 id="setup-mock-service-worker-integration" tabindex="-1">Setup Mock Service Worker Integration <a class="header-anchor" href="#setup-mock-service-worker-integration" aria-hidden="true">#</a></h1><p>Hey and welcome. In this guide I will show you how to setup the msw integration for exposition and include it into your application.</p><div class="tip custom-block"><p class="custom-block-title">Confused? \u{1F615}</p><p>Feel free to reach out if something seems weird, confusing or unnecessary complex.<br> I&#39;m willing to learn and welcome any kind of feedback with open arms. \u{1F917}</p><p><a href="https://github.com/h2xd/exposition" target="_blank" rel="noopener noreferrer">GitHub</a> \u2022 <a href="https://twitter.com/aschujkow" target="_blank" rel="noopener noreferrer">Twitter</a></p></div><h2 id="install-dependencies" tabindex="-1">Install dependencies <a class="header-anchor" href="#install-dependencies" aria-hidden="true">#</a></h2><p>For this example you need to install the following dependencies:</p><ul><li><a href="https://h2xd.github.io/exposition/packages/core.html" target="_blank" rel="noopener noreferrer"><code>@exposition/core</code></a></li><li><a href="https://h2xd.github.io/exposition/packages/integrations.html" target="_blank" rel="noopener noreferrer"><code>@exposition/integrations</code></a></li><li><a href="https://github.com/mswjs/msw" target="_blank" rel="noopener noreferrer"><code>msw</code></a></li></ul><div class="language-sh"><span class="copy"></span><pre><code><span class="line"><span style="color:#ABB2BF;">pnpm add -D @exposition/{core,integrations} msw</span></span>
<span class="line"></span></code></pre></div><div class="language-sh"><span class="copy"></span><pre><code><span class="line"><span style="color:#ABB2BF;">yarn add -D @exposition/{core,integrations} msw</span></span>
<span class="line"></span></code></pre></div><div class="language-sh"><span class="copy"></span><pre><code><span class="line"><span style="color:#ABB2BF;">npm install -D @exposition/{core,integrations} msw</span></span>
<span class="line"></span></code></pre></div><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-hidden="true">#</a></h2><p>First create an <code>Exposition</code> configuration.</p><div class="language-ts"><span class="copy"></span><div class="highlight-lines"><br><br><div class="highlighted">\xA0</div><br><br></div><pre><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">exposition</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createExposition</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">cart</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;filled&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;empty&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;">)</span></span></code></pre></div><p>Setup a client that will be passed the the integration. In this case it is service worker but you can also use <a href="https://mswjs.io/docs/api/setup-server" target="_blank" rel="noopener noreferrer"><code>setupServer</code></a>.</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Setup Mock Service Worker</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">mockWorker</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">setupWorker</span><span style="color:#ABB2BF;">()</span></span></code></pre></div><p>Pass the <code>Exposition</code> configuration and your msw client to the integration.</p><div class="language-ts"><span class="copy"></span><div class="highlight-lines"><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br></div><pre><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Setup the msw integration</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">mswIntegration</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">defineMSWIntegration</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">exposition</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">msw</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">mockWorker</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre></div><h2 id="define-handler" tabindex="-1">Define handler <a class="header-anchor" href="#define-handler" aria-hidden="true">#</a></h2><p>Now comes the spicy part. \u{1F336}\uFE0F<br> You can import the integration and add new handler by calling <code>createHandler</code>.</p><p>The cool part is that the <code>expositionValues</code> will automatically be available and are fully typed.</p><div class="language-ts"><span class="copy"></span><div class="highlight-lines"><br><br><br><br><div class="highlighted">\xA0</div><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">cartItems</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// ... define mocks for cart items</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">mswIntegration</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createHandler</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">expositionValues</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">rest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/cart&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">_request</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">expositionValues</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cart</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;filled&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">response</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">items</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">cartItems</span><span style="color:#ABB2BF;"> }))</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">response</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">({}))</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ]</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Tip \u{1F4A1}</p><p>You can also use the very good <a href="https://github.com/mswjs/data" target="_blank" rel="noopener noreferrer"><code>@mswjs/data</code></a> library,<br> In combination with <a href="https://fakerjs.dev/" target="_blank" rel="noopener noreferrer"><code>@faker-js/faker</code></a>. \u{1F451}</p></div><h2 id="include-into-your-app" tabindex="-1">Include into your app <a class="header-anchor" href="#include-into-your-app" aria-hidden="true">#</a></h2><p>Final part - initialize both msw and integration in your app.</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#E5C07B;">mswIntegration</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">mockWorker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span></code></pre></div><h2 id="next-steps" tabindex="-1">Next steps <a class="header-anchor" href="#next-steps" aria-hidden="true">#</a></h2><p>Checkout the <a href="./../integrations/vue-devtools.html">Vue-Devtools</a> integration it you want to swap values on the fly.</p><div class="warning custom-block"><p class="custom-block-title">Incoming change \u{1F462}</p><p>The whole setup will also most likely change in the next iteration.<br> Since the whole setup feels clunky. So keep your eyes on <a href="https://github.com/h2xd/exposition/issues/14" target="_blank" rel="noopener noreferrer">issue #14</a>.</p></div><h2 id="in-the-meantime" tabindex="-1">In the meantime <a class="header-anchor" href="#in-the-meantime" aria-hidden="true">#</a></h2><p><em>I&#39;m cooking the next guides for the following topics</em></p><div class="info custom-block"><p class="custom-block-title">Next guides</p><ul><li><strong>How to send links your colleagues</strong> \u2014 \u{1F310} <a href="https://github.com/h2xd/exposition/tree/main/packages/web" target="_blank" rel="noopener noreferrer"><code>@exposition/web</code></a> <em>looking at you</em></li><li><strong><a href="https://vitest.dev/" target="_blank" rel="noopener noreferrer">Vitest</a> integration</strong> \u2014 \u{1F40D} <a href="https://github.com/h2xd/exposition/blob/main/packages/integrations/msw/functions/defineMSWIntegration.spec.ts" target="_blank" rel="noopener noreferrer">Sneak peek</a></li><li><strong><a href="https://jestjs.io/" target="_blank" rel="noopener noreferrer">Jest</a> integration</strong> \u2014 \u{1F33F} <em>Similar to <a href="https://vitest.dev/" target="_blank" rel="noopener noreferrer">Vitest</a></em></li><li><strong>Cypress integration</strong> \u2014 \u23F2\uFE0F TBD</li></ul></div>`,30),t=[l];function p(r,c,i,B,d,y){return n(),e("div",null,t)}var g=s(o,[["render",p]]);export{u as __pageData,g as default};
