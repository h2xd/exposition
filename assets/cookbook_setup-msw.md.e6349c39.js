import{_ as s,c as n,o as a,a as l}from"./app.e2a9d70a.js";const A=JSON.parse('{"title":"Setup Mock Service Worker Integration","description":"","frontmatter":{},"headers":[{"level":2,"title":"Install dependencies","slug":"install-dependencies"},{"level":2,"title":"tl;dr setup \u26A1","slug":"tl-dr-setup-\u26A1"},{"level":2,"title":"Create Exposition","slug":"create-exposition"},{"level":2,"title":"Define handler","slug":"define-handler"},{"level":2,"title":"Dynamic config","slug":"dynamic-config"},{"level":2,"title":"Finish \u{1F3C1}","slug":"finish-\u{1F3C1}"},{"level":2,"title":"Next steps","slug":"next-steps"},{"level":2,"title":"Future \u{1F4AB}","slug":"future-\u{1F4AB}"}],"relativePath":"cookbook/setup-msw.md","lastUpdated":1682020926000}'),e={name:"cookbook/setup-msw.md"},o=l(`<h1 id="setup-mock-service-worker-integration" tabindex="-1">Setup Mock Service Worker Integration <a class="header-anchor" href="#setup-mock-service-worker-integration" aria-hidden="true">#</a></h1><p>Hey and welcome. In this guide I will show you how to setup the msw integration for exposition and include it into your application.</p><div class="tip custom-block"><p class="custom-block-title">Confused? \u{1F615}</p><p>Feel free to reach out if something seems weird, confusing or unnecessary complex.<br> I&#39;m willing to learn and welcome any kind of feedback with open arms. \u{1F917}</p><p><a href="https://github.com/h2xd/exposition" target="_blank" rel="noopener noreferrer">GitHub</a> \u2022 <a href="https://twitter.com/aschujkow" target="_blank" rel="noopener noreferrer">Twitter</a></p></div><h2 id="install-dependencies" tabindex="-1">Install dependencies <a class="header-anchor" href="#install-dependencies" aria-hidden="true">#</a></h2><p>For this example you need to install the following dependencies:</p><ul><li><a href="./../packages/core.html"><code>@exposition/core</code></a></li><li><a href="./../packages/integrations.html"><code>@exposition/integrations</code></a></li><li><a href="https://github.com/mswjs/msw" target="_blank" rel="noopener noreferrer"><code>msw</code></a></li></ul><div class="language-sh"><span class="copy"></span><pre><code><span class="line"><span style="color:#ABB2BF;">pnpm add -D @exposition/{core,integrations} msw</span></span>
<span class="line"></span></code></pre></div><div class="language-sh"><span class="copy"></span><pre><code><span class="line"><span style="color:#ABB2BF;">yarn add -D @exposition/{core,integrations} msw</span></span>
<span class="line"></span></code></pre></div><div class="language-sh"><span class="copy"></span><pre><code><span class="line"><span style="color:#ABB2BF;">npm install -D @exposition/{core,integrations} msw</span></span>
<span class="line"></span></code></pre></div><h2 id="tl-dr-setup-\u26A1" tabindex="-1">tl;dr setup \u26A1 <a class="header-anchor" href="#tl-dr-setup-\u26A1" aria-hidden="true">#</a></h2><p>I&#39;m like to fiddle around with code first, so a whole example to copy &amp; paste is just nice.<br> Go ahead and grab the entire code from this cookbook and start building your mocks.</p><details class="details custom-block"><summary><em>Example code</em> \u{1F35D}</summary><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#7F848E;font-style:italic;">// #region imports</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Exposition</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@exposition/core&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createMswIntegration</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@exposition/integrations/msw&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">rest</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;msw&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">setupServer</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;msw/node&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// #endregion imports</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ----------------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// #region create-exposition</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">exampleExposition</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Exposition</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">cart</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;filled&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;empty&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// #endregion create-exposition</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ----------------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// #region setup-msw-integration</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">mswIntegration</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createMswIntegration</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">exampleExposition</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">msw</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">setupServer</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">baseUrl</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;https://localhost:1337&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// #endregion setup-msw-integration</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ----------------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// #region define-msw-handler</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">cartItems</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// ... define mocks for cart items</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">mswIntegration</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createHandler</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">expositionValues</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">rest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/cart&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">_request</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">expositionValues</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cart</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;filled&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">response</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">items</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">cartItems</span><span style="color:#ABB2BF;"> }))</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">response</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">({}))</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ]</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// #endregion define-msw-handler</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ----------------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// #region init-exposition</span></span>
<span class="line"><span style="color:#E5C07B;">exampleExposition</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// #endregion init-exposition</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// #region define-msw-handler-with-config</span></span>
<span class="line"><span style="color:#E5C07B;">mswIntegration</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createHandler</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  (</span><span style="color:#E06C75;font-style:italic;">_expositionValues</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">config</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">rest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">baseUrl</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">/cart\`</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// ... your handler logic</span></span>
<span class="line"><span style="color:#ABB2BF;">      }),</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// #endregion define-msw-handler-with-config</span></span>
<span class="line"></span></code></pre></div></details><p>Otherwise, if you wanna have a break down and a little bit of context follow the steps below.</p><h2 id="create-exposition" tabindex="-1">Create <code>Exposition</code> <a class="header-anchor" href="#create-exposition" aria-hidden="true">#</a></h2><p>First create an <code>Exposition</code> instance by passing in your configuration.</p><div class="language-ts"><span class="copy"></span><div class="highlight-lines"><br><br><div class="highlighted">\xA0</div><br><br></div><pre><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">exampleExposition</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Exposition</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">cart</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;filled&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;empty&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;">)</span></span></code></pre></div><p>Next, use <code>createMswIntegration</code> and add as a setting parameter ether <a href="https://mswjs.io/docs/api/setup-client" target="_blank" rel="noopener noreferrer"><code>setupClient</code></a> or <a href="https://mswjs.io/docs/api/setup-server" target="_blank" rel="noopener noreferrer"><code>setupServer</code></a>. In this case we use <a href="https://mswjs.io/docs/api/setup-server" target="_blank" rel="noopener noreferrer"><code>setupServer</code></a>.</p><div class="language-ts"><span class="copy"></span><div class="highlight-lines"><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br><br><br><br><br></div><pre><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">mswIntegration</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createMswIntegration</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">exampleExposition</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">msw</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">setupServer</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">baseUrl</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;https://localhost:1337&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span></code></pre></div><h2 id="define-handler" tabindex="-1">Define handler <a class="header-anchor" href="#define-handler" aria-hidden="true">#</a></h2><p>You can import the integration and add new handler by calling <code>createHandler</code>. The spicy part is that the first parameter <code>expositionValues</code> will automatically be fully typed. With that you can use a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch" target="_blank" rel="noopener noreferrer">switch statement</a> and your cases will be auto suggested. \u{1F336}\uFE0F</p><div class="language-ts"><span class="copy"></span><div class="highlight-lines"><br><br><br><br><div class="highlighted">\xA0</div><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">cartItems</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// ... define mocks for cart items</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">mswIntegration</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createHandler</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">expositionValues</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">rest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/cart&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">_request</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">expositionValues</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cart</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;filled&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">response</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">items</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">cartItems</span><span style="color:#ABB2BF;"> }))</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">response</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">({}))</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ]</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Pro gamer tip \u{1F451}</p><p>You can also use the very good <a href="https://github.com/mswjs/data" target="_blank" rel="noopener noreferrer"><code>@mswjs/data</code></a> library, in combination with <a href="https://fakerjs.dev/" target="_blank" rel="noopener noreferrer"><code>@faker-js/faker</code></a> to build and fill your mocks. A cookbook for that will follow in the future.</p><details class="details custom-block"><summary>Check out this playground example</summary><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">factory</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">primaryKey</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@mswjs/data&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">faker</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@faker-js/faker&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">mockDatabase</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">factory</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">items</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">primaryKey</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">faker</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">datatype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">uuid</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">name</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">faker</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">commerce</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">productName</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">quantity</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">faker</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">datatype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">number</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">min</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">max</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">precision</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">seedDatabase</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">)).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">mockDatabase</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div></details></div><h2 id="dynamic-config" tabindex="-1">Dynamic config <a class="header-anchor" href="#dynamic-config" aria-hidden="true">#</a></h2><p>Sometimes you want to create dynamic configs between multiple environments. An example. Your local environment has different endpoint than your staging environment. For that you can define a dynamic config and pass it to the integration and then use it while creating MSW interceptors.</p><div class="language-ts"><span class="copy"></span><div class="highlight-lines"><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br></div><pre><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">mswIntegration</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createMswIntegration</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">exampleExposition</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">msw</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">setupServer</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">baseUrl</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;https://localhost:1337&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span></code></pre></div><p>This configuration can than be accessed as the second parameter of the handler function and used to define dynamic base paths or other creative ideas \u{1F4A1}.</p><div class="language-ts"><span class="copy"></span><div class="highlight-lines"><br><div class="highlighted">\xA0</div><br><div class="highlighted">\xA0</div><br><br><br><br></div><pre><code><span class="line"><span style="color:#E5C07B;">mswIntegration</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createHandler</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  (</span><span style="color:#E06C75;font-style:italic;">_expositionValues</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">config</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">rest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">baseUrl</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">/cart\`</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// ... your handler logic</span></span>
<span class="line"><span style="color:#ABB2BF;">      }),</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span></code></pre></div><h2 id="finish-\u{1F3C1}" tabindex="-1">Finish \u{1F3C1} <a class="header-anchor" href="#finish-\u{1F3C1}" aria-hidden="true">#</a></h2><p>Initialize your exposition instance and test it in your app.</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#E5C07B;">exampleExposition</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">()</span></span></code></pre></div><h2 id="next-steps" tabindex="-1">Next steps <a class="header-anchor" href="#next-steps" aria-hidden="true">#</a></h2><p>Checkout the <a href="./../integrations/vue-devtools.html">Vue-Devtools</a> integration if you want to change settings in a conformable way.</p><h2 id="future-\u{1F4AB}" tabindex="-1">Future \u{1F4AB} <a class="header-anchor" href="#future-\u{1F4AB}" aria-hidden="true">#</a></h2><p><em>I&#39;m cooking new guides for the following topics:</em></p><ul><li><strong><a href="https://vitest.dev/" target="_blank" rel="noopener noreferrer"><code>vitest</code></a></strong> \u2014 \u{1F40D} <a href="https://github.com/h2xd/exposition/blob/main/packages/integrations/msw/functions/defineMSWIntegration.spec.ts" target="_blank" rel="noopener noreferrer">Sneak peek</a></li><li><strong><a href="https://jestjs.io/" target="_blank" rel="noopener noreferrer"><code>jest</code></a></strong> \u2014 \u{1F33F} <em>Similar to <a href="https://vitest.dev/" target="_blank" rel="noopener noreferrer">Vitest</a></em></li><li><strong><a href="https://github.com/mswjs/data" target="_blank" rel="noopener noreferrer"><code>@mswjs/data</code></a> + <a href="https://fakerjs.dev/" target="_blank" rel="noopener noreferrer"><code>@faker-js/faker</code></a></strong> \u2014 \u23F2\uFE0F TBD</li><li><strong>Cypress</strong> \u2014 \u23F2\uFE0F TBD</li></ul><p><em>Other topics in my head:</em></p><ul><li><strong>How to send links your colleagues</strong> \u2014 \u{1F310} <a href="https://github.com/h2xd/exposition/tree/main/packages/web" target="_blank" rel="noopener noreferrer"><code>@exposition/web</code></a> <em>looking at you</em></li><li><strong>SSR</strong> \u2014 \u{1F68C} Sync between backend and frontend</li></ul><hr><div class="tip custom-block"><p class="custom-block-title">Got feedback <code>&amp;&amp;||</code> ideas?</p><p>Feel free to reach out if something seems weird, confusing or unnecessary complex.<br> I&#39;m willing to learn and welcome any kind of feedback with open arms. \u{1F917}</p><p><a href="https://github.com/h2xd/exposition" target="_blank" rel="noopener noreferrer">GitHub</a> \u2022 <a href="https://twitter.com/aschujkow" target="_blank" rel="noopener noreferrer">Twitter</a></p></div>`,39),p=[o];function t(r,c,B,i,y,F){return a(),n("div",null,p)}var h=s(e,[["render",t]]);export{A as __pageData,h as default};
